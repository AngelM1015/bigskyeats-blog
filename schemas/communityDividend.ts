import { defineField, defineType } from 'sanity'
import { CreditCardIcon } from '@sanity/icons'

/**
 * Community Dividend schema for Big Sky Eats
 * This schema tracks dividend calculations and distributions to the community
 */

export default defineType({
  name: 'communityDividend',
  title: 'Community Dividend',
  icon: CreditCardIcon,
  type: 'document',
  fields: [
    defineField({
      name: 'period',
      title: 'Period',
      type: 'string',
      validation: (rule) => rule.required(),
      description: 'e.g., "January 2025", "Q1 2025"',
    }),
    defineField({
      name: 'startDate',
      title: 'Period Start Date',
      type: 'date',
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'endDate',
      title: 'Period End Date',
      type: 'date',
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'totalRevenue',
      title: 'Total Platform Revenue',
      type: 'number',
      validation: (rule) => rule.required().min(0),
      description: 'Total revenue generated by Big Sky Eats platform',
    }),
    defineField({
      name: 'dividendPercentage',
      title: 'Dividend Percentage',
      type: 'number',
      validation: (rule) => rule.required().min(0).max(100),
      initialValue: 10,
      description: 'Percentage of revenue allocated to community dividend',
    }),
    defineField({
      name: 'totalDividendAmount',
      title: 'Total Dividend Amount',
      type: 'number',
      validation: (rule) => rule.required().min(0),
      description: 'Total amount to be distributed to community',
    }),
    defineField({
      name: 'totalVotes',
      title: 'Total Votes Cast',
      type: 'number',
      validation: (rule) => rule.required().min(0),
      description: 'Total number of valid votes cast during this period',
    }),
    defineField({
      name: 'dividendPerVote',
      title: 'Dividend Per Vote',
      type: 'number',
      validation: (rule) => rule.required().min(0),
      description: 'Amount each vote is worth in dollars',
    }),
    defineField({
      name: 'restaurantAllocations',
      title: 'Restaurant Allocations',
      type: 'array',
      of: [
        {
          type: 'object',
          fields: [
            {
              name: 'restaurant',
              title: 'Restaurant',
              type: 'reference',
              to: [{ type: 'restaurant' }],
              validation: (rule) => rule.required(),
            },
            {
              name: 'votes',
              title: 'Votes Received',
              type: 'number',
              validation: (rule) => rule.required().min(0),
            },
            {
              name: 'percentage',
              title: 'Percentage of Total Votes',
              type: 'number',
              validation: (rule) => rule.required().min(0).max(100),
            },
            {
              name: 'dividendAmount',
              title: 'Dividend Amount',
              type: 'number',
              validation: (rule) => rule.required().min(0),
            },
          ],
          preview: {
            select: {
              restaurantName: 'restaurant.name',
              votes: 'votes',
              amount: 'dividendAmount',
            },
            prepare({ restaurantName, votes, amount }) {
              return {
                title: restaurantName || 'Unknown Restaurant',
                subtitle: `${votes} votes ‚Ä¢ $${amount?.toFixed(2) || '0.00'}`,
              }
            },
          },
        },
      ],
    }),
    defineField({
      name: 'status',
      title: 'Status',
      type: 'string',
      options: {
        list: [
          { title: 'Draft', value: 'draft' },
          { title: 'Calculated', value: 'calculated' },
          { title: 'Approved', value: 'approved' },
          { title: 'Distributed', value: 'distributed' },
        ],
      },
      initialValue: 'draft',
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'distributionDate',
      title: 'Distribution Date',
      type: 'datetime',
      description: 'When the dividend was actually distributed',
    }),
    defineField({
      name: 'notes',
      title: 'Notes',
      type: 'text',
      rows: 3,
      description: 'Additional notes about this dividend period',
    }),
    defineField({
      name: 'isPublished',
      title: 'Published to Community',
      type: 'boolean',
      initialValue: false,
      description: 'Whether this dividend information is visible to the public',
    }),
  ],
  preview: {
    select: {
      period: 'period',
      totalAmount: 'totalDividendAmount',
      status: 'status',
      totalVotes: 'totalVotes',
    },
    prepare({ period, totalAmount, status, totalVotes }) {
      const statusEmoji = {
        draft: 'üìù',
        calculated: 'üßÆ',
        approved: '‚úÖ',
        distributed: 'üí∞',
      }[status] || '‚ùì'
      
      return {
        title: `${period} Community Dividend`,
        subtitle: `${statusEmoji} $${totalAmount?.toFixed(2) || '0.00'} ‚Ä¢ ${totalVotes || 0} votes`,
      }
    },
  },
  orderings: [
    {
      title: 'Most Recent',
      name: 'endDateDesc',
      by: [{ field: 'endDate', direction: 'desc' }],
    },
    {
      title: 'Oldest First',
      name: 'endDateAsc',
      by: [{ field: 'endDate', direction: 'asc' }],
    },
    {
      title: 'Highest Amount',
      name: 'totalDividendAmountDesc',
      by: [{ field: 'totalDividendAmount', direction: 'desc' }],
    },
  ],
})